  
#if UI
global function ShLoadouts_VMInit
#endif

#if SERVER || CLIENT || UI
global function ShLoadouts_LevelInit_Begin
global function ShLoadouts_LevelInit_Finish
global function ShLoadouts_OnPlayerEHICreated
#endif
#if UI
global function ShLoadouts_LevelShutdown
#endif

#if DEV
global function DEV_DumpLoadoutEntries
#endif
                      
                      

global function RegisterLoadoutSlot

global function LoadoutSlot_IsReady
global function LoadoutSlot_GetItemFlavor
global function LoadoutSlot_GetItemFlavor_ForValidation
global function LoadoutSlot_GetInteger
global function LoadoutSlot_WaitForItemFlavor
global function LoadoutSlot_GetUsableFavorites
global function LoadoutSlot_GetFavorites
global function LoadoutSlot_GetRawStorageContents

global function AddCallback_ItemFlavorLoadoutSlotDidChange_AnyPlayer
global function AddCallback_IntegerLoadoutSlotDidChange_AnyPlayer
global function RemoveCallback_ItemFlavorLoadoutSlotDidChange_AnyPlayer
global function RemoveCallback_IntegerLoadoutSlotDidChange_AnyPlayer
global function AddCallback_ItemFlavorLoadoutSlotDidChange_SpecificPlayer
global function RemoveCallback_ItemFlavorLoadoutSlotDidChange_SpecificPlayer
#if SERVER
                                                  
                                                      
                                        
                                     
                                           
                                            
                                              
#elseif CLIENT || UI
global function RequestSetItemFlavorLoadoutSlot
global function RequestSetItemFlavorLoadoutSlot_WithDuplicatePrevention
global function RequestSetItemFlavorFavoritesSlot
global function RequestClearItemFlavorFavoritesSlot
global function RequestSetFavoredQuip
global function RequestClearFavoredQuip
#if DEV
global function DEV_RequestSetItemFlavorLoadoutSlot
#endif
#endif
global function IsItemFlavorValidForLoadoutSlot
global function GetValidItemFlavorsForLoadoutSlot
global function IsItemFlavorUnlockedForLoadoutSlot
global function IsItemFlavorGRXUnlockedForLoadoutSlot
global function IsItemFlavorGRXUnlockedForLoadoutSlotHelper
global function GetUnlockedItemFlavorsForLoadoutSlot
global function GetRandomGoodItemFlavorForLoadoutSlot
global function GetMostPlayedCharacterItemFlavor
global function GetDefaultItemFlavorForLoadoutSlot
global function ConvertItemFlavorToLoadoutSlotContentsIndex
global function IsValidLoadoutSlotContentsIndexForItemFlavor
global function ConvertLoadoutSlotContentsIndexToItemFlavor
global function IsValidLoadoutSlotContentsIndex

global function GetAllLoadoutSlots
global function IsLoadoutSlotActive

#if UI && DEV
global function DEV_GetValidItemFlavorsForLoadoutSlotForDev
#endif

                      
                      

#if SERVER
                                                      
                                        
                                                             
#endif

#if CLIENT
global function ServerToClient_LoadoutSlotDidChange
global function ServerToClient_LoadoutSlotSetFailed
#endif

#if UI
global function ClientToUI_RefreshLoadoutSlot
global function GetLoadoutItemsSortedForMenu
#endif

                   
                                               
        


const bool LOADOUT_NETVAR_DEBUG_PRINTS = false
const bool LOADOUTS_DBG = false

                      
                      
                      
                      
                      
global const string LOADOUT_TREE_TOP_TIER = "! general"

                                                               
                                
                                      
                                                                                                                                                                                                                         

                                                    
                                                                        

global typedef LoadoutEntry_IsSlotLocked bool functionref( EHI playerEHI )
#if SERVER
       
                                                                                         
      
                                                                                                                                  
#endif
global typedef LoadoutEntry_IsItemFlavorUnlockedFuncType bool functionref( EHI playerEHI, ItemFlavor itemFlavor, bool shouldIgnoreGRX = false, bool shouldIgnoreOtherSlots = false )
global typedef ItemFlavorLoadoutSlotDidChangeFuncType void functionref( EHI playerEHI, ItemFlavor flavor )
global typedef IntegerLoadoutSlotDidChangeFuncType void functionref( EHI playerEHI, int value )

global enum eLoadoutNetworking
{
	PLAYER_EXCLUSIVE,                                                                                               
	PLAYER_GLOBAL,                                                                                                            
}

global enum eLoadoutEntryType
{
	ITEM_FLAVOR,
	INTEGER,
}

global enum eLoadoutCategory
{
	CHARACTER_SKINS,
	CHARACTER_EXECUTIONS,
	CHARACTER_INTRO_QUIPS,
	CHARACTER_KILL_QUIPS,
	WEAPON_SKINS,
	WEAPON_CHARMS,
	CHARACTER_MELEESKINS,
	GCARD_FRAMES,
	GCARD_STANCES,
	GCARD_BADGES,
	GCARD_BADGE_TIER,
	GCARD_TRACKERS,
	GCARD_TRACKER_TIER,
	CHARACTER_FAVORED_QUIPS,
	CHARACTER_SKYDIVE_EMOTES,
	SKYDIVE_TRAIL,
	STICKERS,
	CHARACTER_QUIPS,

	OTHER,
}

global const table< int, string > LOADOUT_CATEGORIES_TO_NAMES_MAP = {
	[eLoadoutCategory.CHARACTER_SKINS] = "character_skins",
	[eLoadoutCategory.CHARACTER_EXECUTIONS] = "character_executions",
	[eLoadoutCategory.CHARACTER_INTRO_QUIPS] = "character_intro_quips",
	[eLoadoutCategory.CHARACTER_KILL_QUIPS] = "character_kill_quips",
	[eLoadoutCategory.WEAPON_SKINS] = "weapon_skins",
	[eLoadoutCategory.WEAPON_CHARMS] = "weapon_charms",
	[eLoadoutCategory.CHARACTER_MELEESKINS] = "character_meleeskins",
	[eLoadoutCategory.GCARD_FRAMES] = "gcard_frames",
	[eLoadoutCategory.GCARD_STANCES] = "gcard_stances",
	[eLoadoutCategory.GCARD_BADGES] = "gcard_badges",
	[eLoadoutCategory.GCARD_BADGE_TIER] = "gcard_badge_tier",
	[eLoadoutCategory.GCARD_TRACKERS] = "gcard_trackers",
	[eLoadoutCategory.GCARD_TRACKER_TIER] = "gcard_tracker_tier",
	[eLoadoutCategory.CHARACTER_FAVORED_QUIPS] = "character_favored_quips",
	[eLoadoutCategory.CHARACTER_SKYDIVE_EMOTES] = "character_skydive_emotes",
	[eLoadoutCategory.SKYDIVE_TRAIL] = "skydive_trail",
	[eLoadoutCategory.STICKERS] = "stickers",
	[eLoadoutCategory.CHARACTER_QUIPS] = "character_quips",

	[eLoadoutCategory.OTHER] = "other",
}

global enum eLoadoutEntryClass
{
	CHARACTER,              
	WEAPON,                  
	ACCOUNT,                                                                          
}

global enum eTristate
{
	TRUE,
	FALSE,
	UNKNOWN,
}

                                                   
                                                                                                                                                            
                                                     
global struct LoadoutEntry
{
	int entryIndex = -1                                                                                       
	int nvIndex                                                                                                                                                                           
	                                                                                                                                                       

	string id = ""                                                              
	int    type = -1                          
	int    loadoutEntryClass = eLoadoutEntryClass.ACCOUNT
	int    category = eLoadoutCategory.OTHER
	int    stryderCharDataArrayIndex = ePlayerStryderCharDataArraySlots.INVALID                      

	#if DEV
		string pdefSectionKey = LOADOUT_TREE_TOP_TIER                          
		string DEV_name       = "?"                    
		#if SERVER
			                                                                                                                                          
		#endif
	#endif       

	int maxFavoriteCount = 0                                                                                                                                                                                                            
	                                                                                        

	             
	int           networkTo = eLoadoutNetworking.PLAYER_EXCLUSIVE
	string ornull networkVarName = ""

	                                                                                             
	LoadoutEntry_IsSlotLocked                     isSlotLocked = null                                                                                                                                                 
	bool                                          isAllowedToChangeDuringMatch = false                                          
	ItemFlavor ornull associatedCharacterOrNull = null                                            

	ItemFlavor& defaultItemFlavor                                                             
	ItemFlavor& favoriteItemFlavor                                                                                                                                                                            

	array<ItemFlavor> validItemFlavorList = []                                                     
	array<string>     favoritePdefKeys = []                                                                
	                                                                                                                                                                                                                                                                          
	                                                                                                                                   

	LoadoutEntry_IsItemFlavorUnlockedFuncType     isItemFlavorUnlocked       = null                                                                                                               
	array<ItemFlavorLoadoutSlotDidChangeFuncType> changeCallbacks_ItemFlavor = []                                                                                  
	table<ItemFlavor, array<LoadoutEntry> >       dependentsByItemFlav       = {}                                                                                                                                           

	#if SERVER
		                                                                                                                                                
	#endif

	                                                   
	array<IntegerLoadoutSlotDidChangeFuncType> changeCallbacks_Integer = []                                                                                                                                                                 
	                                      
}

global const int NUM_BADGE_LOADOUT_SLOTS = 3
global const int NUM_TRACKER_LOADOUT_SLOTS = 3

                       
                       
                       
                       
                       
const int SLOT_CONTENTS_SENTINEL_INVALID = -9999
const int SLOT_CONTENTS_SENTINEL_NOTREADY = 0

const int SLOT_CONTENTS_INTEGER_OFFSET = 2                                                                                                                                                                                                      
                                                                                                                

const int PERSISTENT_DATA_INVALID_SENTINEL = 0

struct LoadoutNetworkVarInfo
{
	int                    nvIndex
	string                 fullNetworkVarName
	int                    type = -1
	array<LoadoutEntry>    usedByEntries = []
}

struct FileStruct_LifetimeLevel
{
	bool                isInitialized = false
	array<LoadoutEntry> loadoutSlotEntries = []
	array<LoadoutEntry> accountLoadoutSlotEntries = []

	bool allowLoadoutSlotOverridesByPlaylist = false

	#if SERVER || CLIENT || UI                                                       
		table<string, LoadoutNetworkVarInfo> networkVars = {}
	#endif

	#if UI
		table<ItemFlavor, bool> TEMP_filteredItems
		bool runHighPerfLoadouts = true                                                                                                         
	#endif

	#if SERVER && DEV
		                                  
	#endif
}
FileStruct_LifetimeLevel& fileLevel



                         
                         
                         
                         
                         

#if UI && DEV
bool DEV_resendAllCacheData = false                      
#endif

#if UI
void function ShLoadouts_VMInit()
{
	#if UI && DEV
		if ( IsFullyConnected() )
			DEV_resendAllCacheData = true
	#endif
}
#endif


void function ShLoadouts_LevelInit_Begin()
{
	                                                       
	                                                                        
	FileStruct_LifetimeLevel newFileLevel
	fileLevel = newFileLevel

	#if UI
		if ( IsConnected() )                                                                                                                 
			fileLevel.runHighPerfLoadouts = GetCurrentPlaylistVarBool( "loadouts_performance_ops_v1", true )                                                                                                                    
	#endif

	#if SERVER || CLIENT
		Remote_RegisterServerFunction( "ClientCallback_loadouts_set", "int", INT_MIN, INT_MAX, "int", INT_MIN, INT_MAX )
		Remote_RegisterServerFunction( "ClientCallback_favorites_set", "int", INT_MIN, INT_MAX, "int", INT_MIN, INT_MAX, "int", INT_MIN, INT_MAX )
		Remote_RegisterServerFunction( "ClientCallback_favorites_clear", "int", INT_MIN, INT_MAX, "int", INT_MIN, INT_MAX )
	#endif

	#if SERVER
		       
			                                                
			                                                                                   
			                                              
		      
	#endif
}

void function ShLoadouts_LevelInit_Finish()
{
	#if SERVER || CLIENT
		Remote_RegisterClientFunction( "ServerToClient_LoadoutSlotDidChange", "int", 0, INT_MAX, "int", 0, fileLevel.loadoutSlotEntries.len() )
		Remote_RegisterClientFunction( "ServerToClient_LoadoutSlotSetFailed" )
	#endif

	foreach ( LoadoutEntry entry in fileLevel.loadoutSlotEntries )
	{
		if ( entry.type == eLoadoutEntryType.ITEM_FLAVOR )
		{
			Assert( entry.validItemFlavorList.len() > 0, "Entry " + entry.id + " had an empty validItemFlavorList" )
			Assert( IsItemFlavorStructValid( entry.defaultItemFlavor ), "entry.defaultValue must have a valid value." )
		}
		else if ( entry.type == eLoadoutEntryType.INTEGER )
		{
			Assert( !IsItemFlavorStructValid( entry.defaultItemFlavor ) )
			Assert( entry.validItemFlavorList.len() == 0 )
			Assert( entry.isItemFlavorUnlocked == null )
			#if SERVER
				                                             
			#endif
		}

		array<string> ornull forceResetTo = GetLoadoutSlotForceResetTo( entry )
		if ( forceResetTo != null )
		{
			foreach ( string itemRef in expect array<string>(forceResetTo) )
			{
				if ( itemRef == "~default~" || itemRef == "~random~" )
					continue

				if ( !IsValidItemFlavorGUID( ConvertItemFlavorGUIDStringToGUID( itemRef ) ) )
				{
					Warning( "Playlist var 'loadout_slot_%s_force_reset_to' refers unknown to unknown item: '%s'", entry.id, itemRef )
					continue
				}

				ItemFlavor itemFlav = GetItemFlavorByGUID( ConvertItemFlavorGUIDStringToGUID( itemRef ) )
				if ( !entry.validItemFlavorList.contains( itemFlav ) )
				{
					printf( "Note: Playlist var 'loadout_slot_%s_force_reset_to' is causing loadout slot '%s' to have new valid item flavor: %s", entry.id, entry.id, itemRef )
					entry.validItemFlavorList.append( itemFlav )
				}
			}
		}

		RegisterSignal( "Loadout_" + entry.id + "_Ready" )

		if ( entry.networkTo == eLoadoutNetworking.PLAYER_GLOBAL )
		{
			#if SERVER || CLIENT
				int desiredNetworkVarType = SNVT_BIG_INT
			#endif

			Assert( entry.networkVarName != "", "LoadoutEntry.networkVarName must be provided if networkTo is set." )
			LoadoutNetworkVarInfo nvInfo
			string fullNetworkVarName = "Loadout_" + expect string(entry.networkVarName)
			entry.networkVarName = fullNetworkVarName
			if ( fullNetworkVarName in fileLevel.networkVars )
			{
				nvInfo = fileLevel.networkVars[fullNetworkVarName]
				#if SERVER || CLIENT
					Assert( nvInfo.type == desiredNetworkVarType )
				#endif
			}
			else
			{
				nvInfo.nvIndex = fileLevel.networkVars.len()
				nvInfo.fullNetworkVarName = fullNetworkVarName
				fileLevel.networkVars[fullNetworkVarName] <- nvInfo
				#if SERVER || CLIENT
					nvInfo.type = desiredNetworkVarType
					RegisterNetworkedVariable(
						nvInfo.fullNetworkVarName, SNDC_PLAYER_GLOBAL,
						nvInfo.type, SLOT_CONTENTS_SENTINEL_NOTREADY
					)
				#endif

				#if CLIENT
					RegisterNetworkedVariableChangeCallback_int( fullNetworkVarName, void function( entity player, int new ) : ( nvInfo )
					{
						EHI playerEHI         = ToEHI( player )
						EHIScriptStruct ehiss = GetEHIScriptStruct( playerEHI )

						#if LOADOUT_NETVAR_DEBUG_PRINTS
							printf( "### LOADOUT SLOT NV, %s (%s), %s --[%d]-> %d (=%d)",
								string(player), string(EHI_IsConnected( playerEHI )), nvInfo.fullNetworkVarName,
								ehiss.netVarsLastSeenValuesMap[nvInfo.nvIndex], new, player.GetPlayerNetInt( nvInfo.fullNetworkVarName ) )
						#endif

						new = player.GetPlayerNetInt( nvInfo.fullNetworkVarName )                                        

						if ( !ehiss.isConnected )
							return

						if ( new == ehiss.netVarsLastSeenValuesMap[nvInfo.nvIndex] )
							return

						ehiss.netVarsLastSeenValuesMap[nvInfo.nvIndex] = new

						#if ASSERTS
							LoadoutEntry ornull found = null
						#endif
						foreach ( LoadoutEntry entry in nvInfo.usedByEntries )
						{
							if ( IsLoadoutSlotCurrentlyNetworked( playerEHI, entry ) )
							{
								#if ASSERTS
									Assert( found == null, "Attempted to network two loadout slots using the same network variable name at the same time"
									+ " (slot 1: \"" + expect LoadoutEntry(found).id + "\", slot 2: \"" + entry.id + "\")." )
									if ( found != null )
										continue
									found = entry
								#endif
								HandleLoadoutSlotNetworkVarChanged( playerEHI, entry, new )
								#if !ASSERTS
									break
								#endif
							}
						}
					} )
				#endif
			}

			entry.nvIndex = nvInfo.nvIndex
			nvInfo.usedByEntries.append( entry )
		}
		else
		{
			if ( entry.type == eLoadoutEntryType.ITEM_FLAVOR )
			{
				if ( entry.networkTo == eLoadoutNetworking.PLAYER_EXCLUSIVE )
				{
					Assert( entry.networkVarName == "", "LoadoutEntry.networkVarName should only be provided if networkTo is PLAYER_GLOBAL." )
				}
				else Assert( false, "Invalid networkTo setting on loadout slot \"" + entry.id + "\": " + entry.networkTo )
			}
		}

		if ( entry.type == eLoadoutEntryType.ITEM_FLAVOR )
		{
			Assert( entry.validItemFlavorList.len() > 0, "No item flavors are registered that are valid for loadout slot '" + entry.id + "'" )

			for ( int favoriteIdx = 0; favoriteIdx < entry.maxFavoriteCount; favoriteIdx++ )
			{
				entry.favoritePdefKeys.append( format( "%s_fav%02d", entry.id, favoriteIdx ) )
			}
		}

		if ( entry.associatedCharacterOrNull != null )
		{
			ItemFlavor ornull character = entry.associatedCharacterOrNull
			expect ItemFlavor ( character )
			LoadoutEntry characterEntry = Loadout_Character()
			array< LoadoutEntry > dependentsForCharacter
			if ( character in characterEntry.dependentsByItemFlav )
				dependentsForCharacter = characterEntry.dependentsByItemFlav[ character ]
			else
				characterEntry.dependentsByItemFlav[ character ] <- dependentsForCharacter

			dependentsForCharacter.append( entry )
		}

	}

	#if DEV
		if ( DEV_ShouldIgnorePersistence() )
			Warning( "dev_loadouts_ignore_persistence is enabled" )
	#endif

	fileLevel.isInitialized = true
}


#if UI
void function ShLoadouts_LevelShutdown()
{
	                                                                                         
}
#endif


                          
                          
                          
                          
                          
LoadoutEntry function RegisterLoadoutSlot( int type, string id, int classId )
{
	Assert( !fileLevel.isInitialized, "Cannot call RegisterLoadoutSlot after initialization has finished." )
	Assert( type == eLoadoutEntryType.ITEM_FLAVOR || type == eLoadoutEntryType.INTEGER )

	#if ASSERTS
		foreach ( LoadoutEntry otherEntry in fileLevel.loadoutSlotEntries )
			Assert( id != otherEntry.id, "Found loadout slots with the same id: " + id )
	#endif

	LoadoutEntry entry
	entry.entryIndex        = fileLevel.loadoutSlotEntries.len()
	entry.id                = id
	entry.type              = type
	entry.loadoutEntryClass = classId

	fileLevel.loadoutSlotEntries.append( entry )
	if ( classId == eLoadoutEntryClass.ACCOUNT || classId == eLoadoutEntryClass.WEAPON )
		fileLevel.accountLoadoutSlotEntries.append( entry )

	return entry
}


bool function LoadoutSlot_IsReady( EHI playerEHI, LoadoutEntry entry )
{
	#if LOADOUTS_DBG
		                          
	#endif

	#if CLIENT
		if ( !IsLocalClientEHIValid() )
			return false
	#endif

	#if CLIENT || UI
		if ( !IsLoadoutSlotCurrentlyAccessible( playerEHI, entry ) )
			return false
	#endif

	return GetLoadoutSlotContentsIndexInternal( playerEHI, entry ) != SLOT_CONTENTS_SENTINEL_NOTREADY
}


ItemFlavor function LoadoutSlot_GetItemFlavor( EHI playerEHI, LoadoutEntry entry, bool ignoreFavoriting = false )
{
	#if LOADOUTS_DBG
		                          
	#endif

	Assert( entry.type == eLoadoutEntryType.ITEM_FLAVOR )

	int slotContentsIndex = SLOT_CONTENTS_SENTINEL_NOTREADY
#if CLIENT || UI
	if ( IsLoadoutSlotCurrentlyAccessible( playerEHI, entry ) )
#endif
	{
		slotContentsIndex = GetLoadoutSlotContentsIndexInternal( playerEHI, entry, ignoreFavoriting )
	}


	                                                                                                                                        

	if ( slotContentsIndex == SLOT_CONTENTS_SENTINEL_INVALID || slotContentsIndex == SLOT_CONTENTS_SENTINEL_NOTREADY )
		return entry.defaultItemFlavor

	ItemFlavor flav = ConvertLoadoutSlotContentsIndexToItemFlavor( entry, slotContentsIndex )

	if ( !ignoreFavoriting )
	{
		Assert( !ItemFlavor_IsTheFavoriteSentinel( flav ) )
	}

	return flav
}


ItemFlavor function LoadoutSlot_GetItemFlavor_ForValidation( EHI playerEHI, LoadoutEntry entry )
{
	#if LOADOUTS_DBG
		                          
	#endif

	Assert( entry.type == eLoadoutEntryType.ITEM_FLAVOR )

	int slotContentsIndex = GetLoadoutSlotContentsIndexFromPersistence( playerEHI, entry, eValidation.DONT_ASSERT )
	if ( slotContentsIndex == SLOT_CONTENTS_SENTINEL_INVALID || slotContentsIndex == SLOT_CONTENTS_SENTINEL_NOTREADY )
		return entry.defaultItemFlavor
	return ConvertLoadoutSlotContentsIndexToItemFlavor( entry, slotContentsIndex )
}


int function LoadoutSlot_GetInteger( EHI playerEHI, LoadoutEntry entry )
{
	#if LOADOUTS_DBG
		                          
	#endif

	Assert( entry.type == eLoadoutEntryType.INTEGER )

	int slotContentsIndex = GetLoadoutSlotContentsIndexInternal( playerEHI, entry )
	Assert( slotContentsIndex != SLOT_CONTENTS_SENTINEL_NOTREADY, "LoadoutSlot_GetItemFlavor used on a loadout slot that was not ready." )

	return (slotContentsIndex - SLOT_CONTENTS_INTEGER_OFFSET)
}

array<ItemFlavor> function LoadoutSlot_GetFavorites( EHI playerEHI, LoadoutEntry entry )
{
	#if LOADOUTS_DBG
		                          
	#endif

	#if CLIENT || UI
		Assert( playerEHI == LocalClientEHI() )
	#endif

	array<ItemFlavor> items
	foreach ( key in entry.favoritePdefKeys )
	{
		#if SERVER || CLIENT
			#if CLIENT
				Assert( playerEHI == LocalClientEHI() )
			#endif
			entity player = FromEHI( playerEHI )
			int guid      = expect int(player.GetPersistentVar( "loadouts." + key ))
		#endif

		#if UI
			Assert( playerEHI == LocalClientEHI() )
			int guid = expect int(GetPersistentVar( "loadouts." + key ))
		#endif

		if ( guid != 0 && IsValidItemFlavorGUID( guid, eValidation.DONT_ASSERT ) )                                                                                                
		{
			ItemFlavor flav = GetItemFlavorByGUID( guid )
			if ( IsItemFlavorGRXUnlockedForLoadoutSlot( playerEHI, flav ) )
				items.append( flav )
		}
	}

	return items
}


array<ItemFlavor> function LoadoutSlot_GetUsableFavorites( EHI playerEHI, LoadoutEntry entry )
{
	#if LOADOUTS_DBG
		                          
	#endif

	array<ItemFlavor> items = LoadoutSlot_GetFavorites( playerEHI, entry )

	if ( items.len() == 0 )
	{
		items.append( entry.defaultItemFlavor )
	}

	return items
}


ItemFlavor function LoadoutSlot_WaitForItemFlavor( EHI playerEHI, LoadoutEntry entry )
{
	#if SERVER
		                                   
	#endif

	#if LOADOUTS_DBG
		                          
	#endif

	Assert( entry.type == eLoadoutEntryType.ITEM_FLAVOR )

	int slotContentsIndex
	while ( true )
	{
#if CLIENT || UI
		if ( IsLoadoutSlotCurrentlyAccessible( playerEHI, entry ) )
#endif
		{
			slotContentsIndex = GetLoadoutSlotContentsIndexInternal( playerEHI, entry )
			if ( IsValidLoadoutSlotContentsIndexForItemFlavor( entry, slotContentsIndex ) )
				break
		}

		WaitSignal( WaitForEHISignalDummy( playerEHI ), "Loadout_" + entry.id + "_Ready" )
	}

	return ConvertLoadoutSlotContentsIndexToItemFlavor( entry, slotContentsIndex )
}


int function LoadoutSlot_GetRawStorageContents( EHI playerEHI, LoadoutEntry entry )
{
	#if LOADOUTS_DBG
		                          
	#endif

	int slotContentsIndex = GetLoadoutSlotContentsIndexInternal( playerEHI, entry )

	                                                          
	#if CLIENT || SERVER
		if ( GetCurrentPlaylistVarBool( "loadouts_performance_ops_v1", true ) )
	#elseif UI
		if ( fileLevel.runHighPerfLoadouts )                                                                    
	#endif
	{
		if ( entry.type == eLoadoutEntryType.ITEM_FLAVOR && slotContentsIndex != SLOT_CONTENTS_SENTINEL_NOTREADY && slotContentsIndex != SLOT_CONTENTS_SENTINEL_INVALID )
		{
			ItemFlavor flav = ConvertLoadoutSlotContentsIndexToItemFlavor( entry, slotContentsIndex )
			return ItemFlavor_GetGUID( flav )
		}
	}
	else                                    
	{
		Assert( slotContentsIndex != SLOT_CONTENTS_SENTINEL_NOTREADY, "LoadoutSlot_GetRawStorageContents used on a loadout slot that was not ready." )

		if ( entry.type == eLoadoutEntryType.ITEM_FLAVOR )
		{
			ItemFlavor flav = ConvertLoadoutSlotContentsIndexToItemFlavor( entry, slotContentsIndex )
			return ItemFlavor_GetGUID( flav )
		}
	}

	return slotContentsIndex                             
}


void function AddCallback_ItemFlavorLoadoutSlotDidChange_AnyPlayer( LoadoutEntry entry, ItemFlavorLoadoutSlotDidChangeFuncType callback, bool shouldCheckRegistered = true )
{
	#if LOADOUTS_DBG
		                          
	#endif

	Assert( entry.type == eLoadoutEntryType.ITEM_FLAVOR )

	if ( shouldCheckRegistered )
		Assert( !entry.changeCallbacks_ItemFlavor.contains( callback ), "Tried to add a callback that was already added" )
	else if ( entry.changeCallbacks_ItemFlavor.contains( callback ) )
		return

	entry.changeCallbacks_ItemFlavor.append( callback )
}


void function AddCallback_IntegerLoadoutSlotDidChange_AnyPlayer( LoadoutEntry entry, IntegerLoadoutSlotDidChangeFuncType callback )
{
	#if LOADOUTS_DBG
		                          
	#endif

	Assert( entry.type == eLoadoutEntryType.INTEGER )
	Assert( !entry.changeCallbacks_Integer.contains( callback ), "Tried to add a callback that was already added" )

	entry.changeCallbacks_Integer.append( callback )
}


void function RemoveCallback_ItemFlavorLoadoutSlotDidChange_AnyPlayer( LoadoutEntry entry, ItemFlavorLoadoutSlotDidChangeFuncType callback, bool shouldCheckRegistered = true )
{
	#if LOADOUTS_DBG
		                          
	#endif

	Assert( entry.type == eLoadoutEntryType.ITEM_FLAVOR )

	if ( shouldCheckRegistered )
		Assert( entry.changeCallbacks_ItemFlavor.contains( callback ), "Tried to remove a callback that was not added" )
	else if ( !entry.changeCallbacks_ItemFlavor.contains( callback ) )
		return

	entry.changeCallbacks_ItemFlavor.fastremovebyvalue( callback )
}


void function RemoveCallback_IntegerLoadoutSlotDidChange_AnyPlayer( LoadoutEntry entry, IntegerLoadoutSlotDidChangeFuncType callback )
{
	#if LOADOUTS_DBG
		                          
	#endif

	Assert( entry.type == eLoadoutEntryType.INTEGER )
	Assert( entry.changeCallbacks_Integer.contains( callback ), "Tried to remove a callback that was not added" )

	entry.changeCallbacks_Integer.fastremovebyvalue( callback )
}


void function AddCallback_ItemFlavorLoadoutSlotDidChange_SpecificPlayer( EHI playerEHI, LoadoutEntry entry, ItemFlavorLoadoutSlotDidChangeFuncType callback, bool shouldCheckRegistered = true )
{
	#if LOADOUTS_DBG
		                          
	#endif

	Assert( entry.type == eLoadoutEntryType.ITEM_FLAVOR )

	EHIScriptStruct ehiss = GetEHIScriptStruct( playerEHI )

	array<ItemFlavorLoadoutSlotDidChangeFuncType> changeCallbacks
	if ( entry.entryIndex in ehiss.itemFlavorLoadoutSlotChangedCallbacksMap )
		changeCallbacks = ehiss.itemFlavorLoadoutSlotChangedCallbacksMap[entry.entryIndex]
	else
		ehiss.itemFlavorLoadoutSlotChangedCallbacksMap[entry.entryIndex] <- changeCallbacks

	if ( shouldCheckRegistered )
		Assert( !changeCallbacks.contains( callback ), "Tried to add a callback that was already added" )
	else if ( changeCallbacks.contains( callback ) )
		return

	changeCallbacks.append( callback )
}


void function RemoveCallback_ItemFlavorLoadoutSlotDidChange_SpecificPlayer( EHI playerEHI, LoadoutEntry entry, ItemFlavorLoadoutSlotDidChangeFuncType callback, bool shouldCheckRegistered = true )
{
	#if LOADOUTS_DBG
		                          
	#endif

	Assert( entry.type == eLoadoutEntryType.ITEM_FLAVOR )

	EHIScriptStruct ehiss = GetEHIScriptStruct( playerEHI )

	array<ItemFlavorLoadoutSlotDidChangeFuncType> changeCallbacks
	if ( entry.entryIndex in ehiss.itemFlavorLoadoutSlotChangedCallbacksMap )
		changeCallbacks = ehiss.itemFlavorLoadoutSlotChangedCallbacksMap[entry.entryIndex]
	else
		ehiss.itemFlavorLoadoutSlotChangedCallbacksMap[entry.entryIndex] <- changeCallbacks

	if ( shouldCheckRegistered )
		Assert( changeCallbacks.contains( callback ), "Tried to remove a callback that was not added" )
	else if ( !changeCallbacks.contains( callback ) )
		return

	changeCallbacks.fastremovebyvalue( callback )
}


#if SERVER
                                                                                                  
 
	                
		                          
	      

	                                                     
	                                                         

	                                                                        
 
#endif


#if SERVER
                                                                                   
 
	                
		                          
	      

	                                                 

	                                                              
	                                                                                                       

	                                                                            
 
#endif


#if CLIENT || UI
void function RequestSetItemFlavorLoadoutSlot_WithDuplicatePrevention( EHI playerEHI, array<LoadoutEntry> loadoutEntries, ItemFlavor itemFlavor, int slotIndex = 0 )
{
	if ( loadoutEntries.len() > 1 )
	{
		                                                                  
		LoadoutEntry oldSlot
		ItemFlavor itemInCurrentSlot = LoadoutSlot_GetItemFlavor( LocalClientEHI(), loadoutEntries[ slotIndex ] )

		foreach ( loadoutEntry in loadoutEntries )
		{
			ItemFlavor item = LoadoutSlot_GetItemFlavor( LocalClientEHI(), loadoutEntry )
			if ( item == itemFlavor )
			{
				RequestSetItemFlavorLoadoutSlot( LocalClientEHI(), loadoutEntry, itemInCurrentSlot )
				break
			}
		}
	}

	RequestSetItemFlavorLoadoutSlot( LocalClientEHI(), loadoutEntries[ slotIndex ], itemFlavor )
}
void function RequestSetItemFlavorLoadoutSlot( EHI playerEHI, LoadoutEntry entry, ItemFlavor itemFlavor )
{
	#if LOADOUTS_DBG
		                          
	#endif

	Assert( playerEHI == LocalClientEHI(), "Tried to use RequestSetLoadoutSlot on a different player" )

	int seqNum            = 0
	int slotContentsIndex = ConvertItemFlavorToLoadoutSlotContentsIndex( entry, itemFlavor )

	Remote_ServerCallFunction( "ClientCallback_loadouts_set", entry.entryIndex, slotContentsIndex )
}

void function RequestSetItemFlavorFavoritesSlot( EHI playerEHI, LoadoutEntry entry, ItemFlavor itemFlavor, int favIndex )
{
	#if LOADOUTS_DBG
		                          
	#endif

	Assert( playerEHI == LocalClientEHI(), "Tried to use RequestSetItemFlavorFavoritesSlot on a different player" )

	int slotContentsIndex = ConvertItemFlavorToLoadoutSlotContentsIndex( entry, itemFlavor )

	Remote_ServerCallFunction( "ClientCallback_favorites_set", favIndex, entry.entryIndex, slotContentsIndex )

	printf( "loadout favorites change request: %s = %s (%s)", entry.id, string(ItemFlavor_GetAsset( itemFlavor )), ItemFlavor_GetGUIDString( itemFlavor ) )
}

void function RequestClearItemFlavorFavoritesSlot( EHI playerEHI, LoadoutEntry entry, int favIndex )
{
	#if LOADOUTS_DBG
		                          
	#endif

	Assert( playerEHI == LocalClientEHI(), "Tried to use RequestClearItemFlavorFavoritesSlot on a different player" )

	Remote_ServerCallFunction( "ClientCallback_favorites_clear", favIndex, entry.entryIndex )

	printf( "loadout favorites clear request: %d", favIndex )
}

void function RequestSetFavoredQuip( ItemFlavor quipToSet )
{
	ItemFlavor character
	EHI playerEHI = LocalClientEHI()

	#if CLIENT
		character = LoadoutSlot_GetItemFlavor( playerEHI, Loadout_Character() )
	#elseif UI
		character = GetTopLevelCustomizeContext()
	#endif

	foreach ( loadoutEntry in Loadout_FavoredQuipArrayForCharacter( character ) )
	{
		ItemFlavor item = LoadoutSlot_GetItemFlavor( LocalClientEHI(), loadoutEntry )
		if ( CharacterQuip_IsTheEmpty( item ) )
		{
			RequestSetItemFlavorLoadoutSlot( playerEHI, loadoutEntry, quipToSet )
			return
		}
	}

	Assert( false, "Attempted to set favored quip when no slots exist." )
}

void function RequestClearFavoredQuip( ItemFlavor quipToClear )
{
	ItemFlavor character
	EHI playerEHI = LocalClientEHI()

	#if CLIENT
		character = LoadoutSlot_GetItemFlavor( playerEHI, Loadout_Character() )
	#elseif UI
		character = GetTopLevelCustomizeContext()
	#endif

	foreach ( loadoutEntry in Loadout_FavoredQuipArrayForCharacter( character ) )
	{
		ItemFlavor item = LoadoutSlot_GetItemFlavor( LocalClientEHI(), loadoutEntry )
		if ( item == quipToClear )
		{
			foreach ( validFlavor in GetValidItemFlavorsForLoadoutSlot( LocalClientEHI(), loadoutEntry ) )
			{
				if ( CharacterQuip_IsTheEmpty( validFlavor ) )
				{
					RequestSetItemFlavorLoadoutSlot( LocalClientEHI(), loadoutEntry, validFlavor )
					break
				}
			}
			break
		}
	}
}
#endif


#if (CLIENT || UI) && DEV
void function DEV_RequestSetItemFlavorLoadoutSlot( EHI playerEHI, LoadoutEntry entry, ItemFlavor itemFlavor )
{
	Assert( playerEHI == LocalClientEHI(), "Tried to use DEV_RequestSetLoadoutSlot on a different player" )

	string commandString = "loadouts_devset " + entry.id + " " + DEV_ItemFlavor_GetCleanedAssetPath( itemFlavor )

	#if CLIENT
		GetLocalClientPlayer().ClientCommand( commandString )      
	#elseif UI
		ClientCommand( commandString )       
	#endif
}
#endif


bool function IsItemFlavorValidForLoadoutSlot( EHI playerEHI, LoadoutEntry entry, ItemFlavor itemFlavor )
{
	#if LOADOUTS_DBG
		                          
	#endif

	Assert( entry.type == eLoadoutEntryType.ITEM_FLAVOR )

	                                              
	return ( entry.validItemFlavorList.contains( itemFlavor ) )
}


array<ItemFlavor> function GetValidItemFlavorsForLoadoutSlot( EHI playerEHI, LoadoutEntry entry )
{
	#if LOADOUTS_DBG
		                          
	#endif

	Assert( entry.type == eLoadoutEntryType.ITEM_FLAVOR )

	Assert( fileLevel.isInitialized )
	return entry.validItemFlavorList
}


#if UI && DEV
array<ItemFlavor> function DEV_GetValidItemFlavorsForLoadoutSlotForDev( EHI playerEHI, LoadoutEntry entry )
{
	#if LOADOUTS_DBG
		                          
	#endif

	Assert( entry.type == eLoadoutEntryType.ITEM_FLAVOR )

	Assert( fileLevel.isInitialized )
	return entry.validItemFlavorList
}
#endif


string function DEV_DescribeLoadoutSlot( LoadoutEntry entry, int slotContentsIndex, bool doId = true )
{
	#if LOADOUTS_DBG
		                          
	#endif

	string out = ""
	if ( doId )
	{
		out += entry.id
		out += ", "
	}
	if ( slotContentsIndex == SLOT_CONTENTS_SENTINEL_NOTREADY )
	{
		out += "~~not ready"
	}
	else if ( slotContentsIndex == SLOT_CONTENTS_SENTINEL_INVALID || slotContentsIndex < 0 )
	{
		out += format( "~~invalid:%d~~", slotContentsIndex )
	}
	else if ( entry.type == eLoadoutEntryType.ITEM_FLAVOR )
	{
		if ( IsValidLoadoutSlotContentsIndexForItemFlavor( entry, slotContentsIndex ) )
		{
			ItemFlavor flav = ConvertLoadoutSlotContentsIndexToItemFlavor( entry, slotContentsIndex )
			out += DEV_DescItemFlavor( flav )
		}
		else
		{
			out += format("~~unmapped index:%d~~", slotContentsIndex)
		}
	}
	else if ( entry.type == eLoadoutEntryType.INTEGER )
	{
		out += string(slotContentsIndex - SLOT_CONTENTS_INTEGER_OFFSET)
	}
	return out
}


bool function IsItemFlavorUnlockedForLoadoutSlot( EHI playerEHI, LoadoutEntry entry, ItemFlavor itemFlavor, bool shouldIgnoreGRX = false, bool shouldIgnoreOtherSlots = false )
{
	#if LOADOUTS_DBG
		                          
	#endif

	#if CLIENT || UI
		Assert( playerEHI == EHI_null || playerEHI == LocalClientEHI() )
	#endif

	Assert( entry.type == eLoadoutEntryType.ITEM_FLAVOR )

	if ( !ItemFlavor_IsAvailableInPlaylist( itemFlavor ) )
		return false

	if ( playerEHI == EHI_null )
		return true

	#if SERVER
		                        
		 
			                             
				           
			                                                                                
		 
	#endif

	LoadoutEntry_IsItemFlavorUnlockedFuncType isItemFlavorUnlocked = entry.isItemFlavorUnlocked
	if ( isItemFlavorUnlocked == null )
		isItemFlavorUnlocked = IsItemFlavorGRXUnlockedForLoadoutSlot

	return isItemFlavorUnlocked( playerEHI, itemFlavor, shouldIgnoreGRX, shouldIgnoreOtherSlots )
}


int function IsItemFlavorGRXUnlockedForLoadoutSlotHelper( EHI playerEHI, ItemFlavor itemFlavor, bool shouldIgnoreGRX = false, bool shouldIgnoreOtherSlots = false )
{
	if ( shouldIgnoreGRX )
		return eTristate.TRUE

#if SERVER
	                                                                                    
		                      

	                        
	 
		                             
			                     
		                                                                               
			                     
		                      
	 
#endif

	if ( IsLobby() && !ItemFlavor_IsActiveForEdition( itemFlavor, GRX_GetPlayerEdition( FromEHI( playerEHI ) ) ) )
		return eTristate.FALSE

	return eTristate.UNKNOWN
}


bool function IsItemFlavorGRXUnlockedForLoadoutSlot( EHI playerEHI, ItemFlavor itemFlavor, bool shouldIgnoreGRX = false, bool shouldIgnoreOtherSlots = false )
{
	switch( IsItemFlavorGRXUnlockedForLoadoutSlotHelper( playerEHI, itemFlavor, shouldIgnoreGRX, shouldIgnoreOtherSlots ) )
	{
		case eTristate.TRUE:
			return true
		case eTristate.FALSE:
			return false
		default:
			return GRX_IsItemOwnedByPlayer_AllowOutOfDateData( itemFlavor, FromEHI( playerEHI ) )
	}
	unreachable
}


array<ItemFlavor> function GetUnlockedItemFlavorsForLoadoutSlot( EHI playerEHI, LoadoutEntry entry, bool shouldIgnoreOtherSlots )
{
	#if LOADOUTS_DBG
		                          
	#endif

	Assert( entry.type == eLoadoutEntryType.ITEM_FLAVOR )

	array<ItemFlavor> flavors = []

	foreach ( ItemFlavor validItemFlavor in entry.validItemFlavorList )
	{
		if ( IsItemFlavorUnlockedForLoadoutSlot( playerEHI, entry, validItemFlavor, false, shouldIgnoreOtherSlots ) )
			flavors.append( validItemFlavor )
	}

	return flavors
}

void function RemoveNonShippingCharacters( array<ItemFlavor> characterList )
{
	foreach( ItemFlavor character in characterList )
	{
		if ( !CharacterClass_GetIsShippingCharacter( character ) )
		{
			characterList.fastremovebyvalue( character )
		}
	}
}

void function RemoveExceptions( array<ItemFlavor> listCopy, array<ItemFlavor> exceptions = [] )
{
	for ( int i = 0; i < exceptions.len(); i++ )
	{
		if ( listCopy.contains( exceptions[ i ] ) )
		{
			listCopy.fastremovebyvalue( exceptions[ i ] )
		}
	}
}

ItemFlavor function GetFirstValidItemFlavor( EHI playerEHI, LoadoutEntry entry, array<ItemFlavor> itemFlavors , bool onlyValidateGRX = false )
{
	foreach ( ItemFlavor flav in itemFlavors )
	{
		if ( ItemFlavor_GetType( flav ) == eItemType.character_execution && CharacterExecution_IsNotEquippable( flav ) )
			continue

		if ( onlyValidateGRX )
		{
			if ( IsItemFlavorGRXUnlockedForLoadoutSlot( playerEHI, flav ) )
				return flav
		}
		else
		{
			if ( IsItemFlavorUnlockedForLoadoutSlot( playerEHI, entry, flav ) )
				return flav
		}
	}
	Assert( false, "Could not find an unlocked item flavor for loadout slot: " + entry.id )
	unreachable
}



ItemFlavor function GetRandomGoodItemFlavorForLoadoutSlot( EHI playerEHI, LoadoutEntry entry, bool onlyValidateGRX = false, array<ItemFlavor> exceptions = [] )
{
	#if LOADOUTS_DBG
		                          
	#endif

	Assert( entry.type == eLoadoutEntryType.ITEM_FLAVOR )

	array<ItemFlavor> randomListCopy
	randomListCopy = clone entry.validItemFlavorList

	RemoveExceptions( randomListCopy, exceptions )

	randomListCopy.randomize()

	ItemFlavor returnItem = GetFirstValidItemFlavor( playerEHI, entry, randomListCopy, onlyValidateGRX )
	return returnItem
}


ItemFlavor function GetMostPlayedCharacterItemFlavor( EHI playerEHI, LoadoutEntry entry, bool onlyValidateGRX = false, array<ItemFlavor> exceptions = [] )
{
	#if LOADOUTS_DBG
		                          
	#endif

	Assert( entry.type == eLoadoutEntryType.ITEM_FLAVOR )

	array<ItemFlavor> characterListCopy
	characterListCopy = clone entry.validItemFlavorList

	RemoveExceptions( characterListCopy, exceptions )

	RemoveNonShippingCharacters( characterListCopy )

	characterListCopy.sort( int function( ItemFlavor character1, ItemFlavor character2 ) : ( playerEHI ) {

		string characterRef1 = ItemFlavor_GetGUIDString( character1 )
		int charGames1       = GetStat_Int( FromEHI( playerEHI ), ResolveStatEntry( CAREER_STATS.character_games_played, characterRef1 ) )

		string characterRef2 = ItemFlavor_GetGUIDString( character2 )
		int charGames2       = GetStat_Int( FromEHI( playerEHI ), ResolveStatEntry( CAREER_STATS.character_games_played, characterRef2 ) )

		int diff = charGames2 - charGames1                                                  

		return diff
	} )


#if LOADOUTS_DBG
	                                                  
	                                                    
	 
		                                                             
		                                                            
		                                                                                                                            
		                                                               
	 
#endif

	ItemFlavor returnItem = GetFirstValidItemFlavor( playerEHI, entry, characterListCopy, onlyValidateGRX )

#if LOADOUTS_DBG
		                                                                
		                                                              
		                                                                                                                                    
		                                                                                                                 
#endif

	return returnItem
}


array<LoadoutEntry> function GetAllLoadoutSlots()
{
	return fileLevel.loadoutSlotEntries
}

                   
                   
                   
                   
                   
#if SERVER && DEV
                                    
 
	                                                                                                               
	                                                            
	                                                            
	                                                              
	 
		                                                     
		 
			                                             
			                                               
		 
		                                                         
	 
	                                               
	 
		                                         
		                                                                 
		 
			                                     
			                                                  
			 
				                                                        
			 
		 
	 
	                       

	                                         
	                                                          
	                           
 
#endif


#if SERVER && DEV
                                               
 
	                                                                              
	                                                                            
	 
		                                                                                                    
	 
 
#endif


#if SERVER || CLIENT || UI
void function ShLoadouts_OnPlayerEHICreated( EHI player, bool thisCallIsHappeningBecauseTheUIVMReset = false )
{
	EHIScriptStruct ehiss = GetEHIScriptStruct( player )
	#if SERVER || CLIENT
		fileLevel.allowLoadoutSlotOverridesByPlaylist = GetCurrentPlaylistVarBool( "allow_loadout_slot_overrides", false )
	#elseif UI
		fileLevel.allowLoadoutSlotOverridesByPlaylist = false                                                        
	#endif

#if SERVER
	       
		                                  
			                      

		                          
		 
			                                                                            
			 
				                                                         
					                                                                                              
			 
		 
	      

	                               
	                                                                       
		                                                                                                        
	    
		                                                                                                 
#endif

	#if CLIENT
		ehiss.netVarsLastSeenValuesMap.resize( fileLevel.networkVars.len(), SLOT_CONTENTS_SENTINEL_NOTREADY )
	#elseif UI
		ehiss.loadoutSlotsLastSeenContentsMap.resize( fileLevel.loadoutSlotEntries.len(), SLOT_CONTENTS_SENTINEL_NOTREADY )
	#endif

	#if CLIENT
		if ( thisCallIsHappeningBecauseTheUIVMReset )
		{
			foreach ( LoadoutEntry entry in fileLevel.loadoutSlotEntries )
			{
				if ( !IsLoadoutSlotCurrentlyNetworked( player, entry ) )
					continue

				int slotContentsIndex = GetLoadoutSlotContentsIndexInternal( player, entry )
				RunUIScript( "ClientToUI_RefreshLoadoutSlot", player, entry.entryIndex, slotContentsIndex )
			}
		}
	#endif
}
#endif


#if SERVER
                                                                                                                        
 
	                                

	                                                           
		                                               
			                                                

		                                                            
			                                           
	   

	                                                                   
		                                                                

	                          
	                          

                      
	                                                                                                             
     
	                                             
      
	 
		                 
		                    
	 

	                                                                                                                         
 
#endif


#if SERVER
                                                                     
 
	                             
		      

	                                           
	 
		                      
			                                                                                                         
		      
	 

	                                         
		      

	                                  
 
#endif

#if SERVER
                                                       
 
	                                                    
	                         
		      

	                                      
	                
	 
		                                                                       
			                                                        
		    
			                                                 
	 
	                                                                                                                                                              
	 
		                                            
	  

	                                
	                                                                                       

	                                   
 
#endif

#if SERVER
                                                                                                               
 
	                                                    
	                         
		      

	                 
	 
		                                                                                                         
		      
	 

	                                          
	                                            
	 
		                                                      
		 
			                                                  
				        

			                                                                      
				                                    
		 
	 

	                                
	                                                                                         
 
#endif

#if CLIENT
void function HandleLoadoutSlotNetworkVarChanged( EHI playerEHI, LoadoutEntry entry, int new )
{
	#if LOADOUTS_DBG
		                          
	#endif

	if ( !fileLevel.isInitialized )
		return

	RefreshLoadoutSlotInternal( playerEHI, entry, null )
}
#endif


bool function IsValidLoadoutSlotContentsIndex( LoadoutEntry entry, int slotContentsIndex, int validationBehavior = eValidation.DONT_ASSERT )
{
	#if LOADOUTS_DBG
		                          
	#endif

	if ( entry.type == eLoadoutEntryType.ITEM_FLAVOR && IsValidItemFlavorGUID( slotContentsIndex ) )
	{
		return true
	}


	if ( entry.type == eLoadoutEntryType.INTEGER )
	{
		int value = slotContentsIndex - SLOT_CONTENTS_INTEGER_OFFSET
		if ( value >= 0 && value <= INT_MAX )
		{
			return true
		}
	}

	Assert( validationBehavior != eValidation.ASSERT, "Invalid loadout slot contents index " + slotContentsIndex + " for " + entry.id )
	return false
}


bool function IsValidLoadoutSlotContentsIndexForItemFlavor( LoadoutEntry entry, int slotContentsIndex )
{

	#if LOADOUTS_DBG
		                          
	#endif

	Assert( entry.type == eLoadoutEntryType.ITEM_FLAVOR )

	if ( slotContentsIndex == SLOT_CONTENTS_SENTINEL_INVALID || slotContentsIndex == SLOT_CONTENTS_SENTINEL_NOTREADY )
		return false

	return ( IsValidItemFlavorGUID( slotContentsIndex ) )
}


ItemFlavor function ConvertLoadoutSlotContentsIndexToItemFlavor( LoadoutEntry entry, int slotContentsIndex )
{
	#if LOADOUTS_DBG
		                          
	#endif

	Assert( entry.type == eLoadoutEntryType.ITEM_FLAVOR )

	Assert( slotContentsIndex != SLOT_CONTENTS_SENTINEL_INVALID, "Invalid loadout slot contents index " + slotContentsIndex + " for " + entry.id )
	Assert( slotContentsIndex != SLOT_CONTENTS_SENTINEL_NOTREADY )
	Assert( IsValidItemFlavorGUID( slotContentsIndex ) )

	return GetItemFlavorByGUID( slotContentsIndex )
}


int function ConvertItemFlavorToLoadoutSlotContentsIndex( LoadoutEntry entry, ItemFlavor itemFlavor )
{
	#if LOADOUTS_DBG
		                          
	#endif

	Assert( entry.type == eLoadoutEntryType.ITEM_FLAVOR )

	Assert( entry.validItemFlavorList.contains( itemFlavor ) )
	return ItemFlavor_GetGUID( itemFlavor )
}


int function GetLoadoutSlotContentsIndexInternal( EHI playerEHI, LoadoutEntry entry, bool ignoreFavoriting = false )
{
	#if LOADOUTS_DBG
		                          
	#endif

	#if SERVER
		                                            
			                                      

		                                                       

		                         
		 
			                                                                                                                          
			 
				                
					                                      
			 
			                                                                          
			 
				                                      
			 
		 

		                                                                                                           
	#elseif CLIENT || UI
		if ( !EHIHasValidScriptStruct( playerEHI ) )
			return SLOT_CONTENTS_SENTINEL_NOTREADY

		int slotContentsIndex

		if ( entry.networkTo == eLoadoutNetworking.PLAYER_GLOBAL && playerEHI != LocalClientEHI() )
		{
			#if CLIENT
				slotContentsIndex = GetLoadoutSlotContentsIndexFromNetworkVar( playerEHI, entry )
			#elseif UI
				slotContentsIndex = GetLoadoutSlotContentsIndexFromCache( playerEHI, entry )
			#endif
		}
		else
		{
			Assert( playerEHI == LocalClientEHI(), "Tried to access a loadout slot of a different client (LoadoutEntry.networkTo on '" + entry.id + "' is not PLAYER_GLOBAL)" )
			slotContentsIndex = GetLoadoutSlotContentsIndexFromPersistence( playerEHI, entry, eValidation.DONT_ASSERT, ignoreFavoriting )
		}

		if ( !IsContentsIndexValidForLoadoutSlot( playerEHI, entry, slotContentsIndex ) )
		{
			#if CLIENT || SERVER
				if ( GetCurrentPlaylistVarBool( "loadouts_performance_ops_v1", true ) )
			#elseif UI
				if ( fileLevel.runHighPerfLoadouts )                                                                    
			#endif
			{
				if ( entry.type == eLoadoutEntryType.ITEM_FLAVOR )
				{
					ItemFlavor defaultFlav = GetDefaultItemFlavorForLoadoutSlot( playerEHI, entry )
					return ConvertItemFlavorToLoadoutSlotContentsIndex( entry, defaultFlav )
				}
				else if ( entry.type == eLoadoutEntryType.INTEGER )
				{
					return SLOT_CONTENTS_INTEGER_OFFSET
				}
			}
			else                                                                      
			{
				return SLOT_CONTENTS_SENTINEL_NOTREADY
			}
		}
		return slotContentsIndex
	#endif
}


#if SERVER || CLIENT || UI
int function GetLoadoutSlotContentsIndexFromPersistence( EHI playerEHI, LoadoutEntry entry, int validationBehavior = eValidation.ASSERT, bool ignoreFavoriting = false )
{
	#if LOADOUTS_DBG
		                          
	#endif

#if DEV
	if ( DEV_ShouldIgnorePersistence() )
	{
		if ( entry.type == eLoadoutEntryType.ITEM_FLAVOR )
		{
			ItemFlavor defaultItemFlavor = GetDefaultItemFlavorForLoadoutSlot( playerEHI, entry )
			return ConvertItemFlavorToLoadoutSlotContentsIndex( entry, defaultItemFlavor )
		}
		else if ( entry.type == eLoadoutEntryType.INTEGER )
		{
			return SLOT_CONTENTS_INTEGER_OFFSET
		}
	}
#endif

	#if SERVER || CLIENT
		entity player         = FromEHI( playerEHI )
		int slotContentsIndex = expect int(player.GetPersistentVar( "loadouts." + entry.id ))
	#elseif UI
		if ( !IsPersistenceAvailable() )
			return SLOT_CONTENTS_SENTINEL_NOTREADY

		Assert( playerEHI == LocalClientEHI() )
		int slotContentsIndex = expect int(GetPersistentVar( "loadouts." + entry.id ))
	#endif


	if ( slotContentsIndex < 0 )                                 
	{
		if ( ignoreFavoriting )
			return ConvertItemFlavorToLoadoutSlotContentsIndex( entry, entry.favoriteItemFlavor )
		else
			slotContentsIndex *= -1
	}

	if ( slotContentsIndex == PERSISTENT_DATA_INVALID_SENTINEL )
	{
		#if SERVER
			                                                                                                                          
			 
				                
					                
						                                                                                   
				      
			 
			                                                                          
			 
				                                                                                                                                                             
			 
		#endif              
		return SLOT_CONTENTS_SENTINEL_INVALID
	}

	if ( entry.type == eLoadoutEntryType.ITEM_FLAVOR )
	{
		if ( !IsValidItemFlavorGUID( slotContentsIndex ) )
		{
			#if SERVER
				                                                                                                                          
				 
					                
						                                                                                                           
				 
				                                                                          
				 
					                                                                                                                                                             
				 
			#endif              
			return SLOT_CONTENTS_SENTINEL_INVALID
		}

		return slotContentsIndex
	}
	else if ( entry.type == eLoadoutEntryType.INTEGER )
	{
		return slotContentsIndex
	}

	return SLOT_CONTENTS_SENTINEL_INVALID
}
#endif


#if SERVER || CLIENT
int function GetLoadoutSlotContentsIndexFromNetworkVar( EHI playerEHI, LoadoutEntry entry, int validationBehavior = eValidation.ASSERT )
{
	#if LOADOUTS_DBG
		                          
	#endif

	#if SERVER
		                                    
		                                                                      
	#elseif CLIENT
		return GetEHIScriptStruct( playerEHI ).netVarsLastSeenValuesMap[entry.nvIndex]
	#endif
}
#endif


#if UI
int function GetLoadoutSlotContentsIndexFromCache( EHI playerEHI, LoadoutEntry entry, int validationBehavior = eValidation.ASSERT )
{
	#if LOADOUTS_DBG
		                          
	#endif

	return GetEHIScriptStruct( playerEHI ).loadoutSlotsLastSeenContentsMap[entry.entryIndex]
}
#endif


#if SERVER
                                                                                                                             
 
	                
		                          
	      

	                                        

	                                                        

	                                                          

	       
		                                    
		 
			                                                                                                                
			                        
		 
	      

	                                    
	                                                                                           

	                                             
	                                                    

	                        
 

                                                                                                                 
 
	                
		                          
	      

	                                      
	       
		                
		 
			                                    
			                                                               
			 
				                                                                                                 
			 
		 
	      

	                                                        

	                                                     
	 
		                                                                                      
		                                                   

		                          
		 
			                                                                                 
			                                            
			 
				                                                
				                                            

				                           
			 
		 

		                                                  
	 

	       
		                                    
		 
			                                                                                                                
			                        
		 
	      

	                                    
	                                                                    

	                                                    

	                        
 

                                                                                                         
 
	                
		                          
	      

	                                        

	       
		                                    
		 
			                                                                                                                
			      
		 
	      

	                                    

	               
	                                                  
	 
		                                                                                        
	 

	                 

	                        
	                                      
	 
		                   
			                               
	 

	                                                  
	 
		            

		                              
		 
			                       
		 

		                                                                          
	 

	                                             
	                                                    
 

                                                                            
 
	                
		                          
	      

	                                                                              

	                                                
		           

	                                                                   

	                                                                     

	                                
		           

	                                                                           

	            
 

                                                                                         
 
	                
		                          
	      

	                 
		            

	                                                                              

	                                                
		            

	                                                                           

	           
 
#endif


#if SERVER
                                                                                                               
 
	                
		                          
	      

	       
		                                    
		 
			                                                                                                                
			      
		 
	      

	                                                           

	                                      

	                                    
	                                                                 

	                                                    
 
#endif


#if SERVER || CLIENT || UI
void function RefreshLoadoutSlotInternal( EHI playerEHI, LoadoutEntry entry, table<LoadoutEntry, bool> ornull refreshedSlotsSet )
{
	#if LOADOUTS_DBG
		                          
	#endif

	if ( refreshedSlotsSet != null )
	{
		expect table<LoadoutEntry, bool>(refreshedSlotsSet)
		if ( entry in refreshedSlotsSet )
			return
		refreshedSlotsSet[entry] <- true
	}
	#if CLIENT || UI
		LocalClientEHI()                                                                               
	#endif

	#if SERVER
		                                                       
		                         
			      
	#endif

	int slotContentsIndex = GetLoadoutSlotContentsIndexInternal( playerEHI, entry )

	#if SERVER
		                                    

		                                                          
		 
			                                                          
			 
				           
					                                                                                 
					                                                                                
					 
						                                                                                                               
							                                                                                         
								                                                                                              
								                                                                                                                               
					 
				      

				                                

				                                                                            
				                                                                                

				                                                                                                                                                                   
				                                                                                                                                                                   
				                                                                                                                                                                   
				                                                                                                                                                              
				                                                                                                                                                             
				                                                                                                                                                                   
				                                                                                                          
				   
				                                    
					                                                                                                                               
			 
			                                                                  
			 
				                                                       
				                                                                                                                               
			 
		 
	#elseif CLIENT
		entity player = FromEHI( playerEHI )
		RunUIScript( "ClientToUI_RefreshLoadoutSlot", playerEHI, entry.entryIndex, slotContentsIndex )
	#endif

	if ( slotContentsIndex != SLOT_CONTENTS_SENTINEL_NOTREADY && slotContentsIndex != SLOT_CONTENTS_SENTINEL_INVALID )
	{
		Signal( GetEHISignalDummy( playerEHI ), "Loadout_" + entry.id + "_Ready" )
	}

	if ( slotContentsIndex == SLOT_CONTENTS_SENTINEL_NOTREADY || slotContentsIndex == SLOT_CONTENTS_SENTINEL_INVALID )
	{
		  
	}
	else if ( entry.type == eLoadoutEntryType.ITEM_FLAVOR )
	{
		ItemFlavor slotContents = ConvertLoadoutSlotContentsIndexToItemFlavor( entry, slotContentsIndex )

		                                                                                                                                                                            
		                                                                                                                                                                        
		if ( IsLoadoutSlotActive( playerEHI, entry ) )
		{
			CallItemFlavorLoadoutSlotDidChangeCallbacks( playerEHI, entry, slotContents )

			#if SERVER || CLIENT                                                                                                       
				if ( slotContents in entry.dependentsByItemFlav )
				{
					foreach ( LoadoutEntry dependentEntry in entry.dependentsByItemFlav[slotContents] )
					{
						if ( IsLoadoutSlotActive( playerEHI, dependentEntry, entry ) )
						{
							RefreshLoadoutSlotInternal( playerEHI, dependentEntry, refreshedSlotsSet )
						}
					}
				}
			#endif
		}
	}
	else if ( entry.type == eLoadoutEntryType.INTEGER )
	{
		int value = (slotContentsIndex - SLOT_CONTENTS_INTEGER_OFFSET)
		if ( IsLoadoutSlotActive( playerEHI, entry ) )
			CallIntegerLoadoutSlotDidChangeCallbacks( playerEHI, entry, value )
	}
}
#endif


#if CLIENT
void function ServerToClient_LoadoutSlotDidChange( EHI playerEHI, int entryIndex )
{
	Assert( playerEHI == LocalClientEHI() )

	LoadoutEntry entry = fileLevel.loadoutSlotEntries[entryIndex]

	RefreshLoadoutSlotInternal( playerEHI, entry, null )
}
#endif

#if CLIENT
void function ServerToClient_LoadoutSlotSetFailed()
{
	RunUIScript( "ClientToUI_PlayLootCeremonySound", "menu_deny" )
	return
}
#endif


#if UI
void function ClientToUI_RefreshLoadoutSlot( EHI playerEHI, int entryIndex, int slotContentsIndex )
{
	if ( !fileLevel.isInitialized )
		return                                                    

	LoadoutEntry entry    = fileLevel.loadoutSlotEntries[entryIndex]
	EHIScriptStruct ehiss = GetEHIScriptStruct( playerEHI )
	ehiss.loadoutSlotsLastSeenContentsMap[entryIndex] = slotContentsIndex

	RefreshLoadoutSlotInternal( playerEHI, entry, null )
}


array<ItemFlavor> function TEMP_FilterItemsForGRX( EHI playerEHI, array<ItemFlavor> items )
{
	array<ItemFlavor> filteredItems

	foreach ( itemFlavor in items )
	{
		if ( ItemFlavor_GetGRXMode( itemFlavor ) == eItemFlavorGRXMode.REGULAR || ItemFlavor_GetGRXMode( itemFlavor ) == eItemFlavorGRXMode.OWNERSHIP_TARGET )
		{
			if ( !GRX_AreOffersReady() )
				continue

			bool shouldShow = false
			if ( GRX_IsItemCraftable( itemFlavor ) )
				shouldShow = true

			if ( GRX_IsItemOwnedByPlayer( itemFlavor ) )
				shouldShow = true

			array<GRXScriptOffer> offers = GRX_GetItemDedicatedStoreOffers( itemFlavor, "recolor" )
			foreach ( offer in offers )
			{
				ItemFlavor ornull prereqFlav = offer.prereq
				if ( prereqFlav == null )
					continue

				expect ItemFlavor( prereqFlav )

				if ( offer.prices.len() != 1 )
					continue

				ItemFlavorBag price = offer.prices[0]
				if ( price.flavors.len() != 1 )
					continue

				if ( price.flavors[0] != GRX_CURRENCIES[GRX_CURRENCY_CREDITS] )
					continue

				shouldShow = GRX_IsInventoryReady() && GRX_IsItemOwnedByPlayer( prereqFlav )
			}

			if ( !shouldShow )
				continue
		}

		filteredItems.append( itemFlavor )
	}

	return filteredItems
}


array<ItemFlavor> function FilterItemsForVisibility( EHI playerEHI, array<ItemFlavor> items )
{
	array<ItemFlavor> filteredItems

	entity player = FromEHI( playerEHI )

	foreach ( item in items )
	{
		if ( ItemFlavor_ShouldBeVisible( item, player ) )
		{
			filteredItems.append( item )
		}
	}

	return filteredItems
}

array<ItemFlavor> function GetLoadoutItemsSortedForMenu( LoadoutEntry entry, int functionref( ItemFlavor ) sortOrdinalFunc )
{
	#if LOADOUTS_DBG
		                          
	#endif

	EHI playerEHI           = LocalClientEHI()
	array<ItemFlavor> items = GetValidItemFlavorsForLoadoutSlot( playerEHI, entry )

	if ( GetCurrentPlaylistVarBool( "filter_uncraftable_items", true ) )
		items = TEMP_FilterItemsForGRX( playerEHI, items )

	items = FilterItemsForVisibility( playerEHI, items )

	ItemFlavor equippedItem
	if ( LoadoutSlot_IsReady( playerEHI, entry ) )
		equippedItem = LoadoutSlot_GetItemFlavor( playerEHI, entry, true )

	items.sort( int function( ItemFlavor a, ItemFlavor b ) : ( playerEHI, equippedItem, sortOrdinalFunc, entry ) {
		                                                          
		                                                          
		                              
		  	         
		                                   
		  	        

		bool aIsEquipped = (a == equippedItem)
		bool bIsEquipped = (b == equippedItem)
		if ( aIsEquipped && !bIsEquipped )
			return -1
		else if ( bIsEquipped && !aIsEquipped )
			return 1

		int itemType = ItemFlavor_GetType( a )

		if ( IsItemFlavorStructValid( equippedItem ) && ItemFlavor_IsTheFavoriteSentinel( equippedItem ) )
		{
			array<ItemFlavor> favs = LoadoutSlot_GetFavorites( playerEHI, entry )
			bool aInFavs           = favs.contains( a )
			bool bInFavs           = favs.contains( b )
			if ( aInFavs && !bInFavs )
				return -1
			else if ( !aInFavs && bInFavs )
				return 1
		}

		if ( ItemFlavor_IsTheFavoriteSentinel( a ) && !ItemFlavor_IsTheFavoriteSentinel( b ) )
			return -1
		else if ( !ItemFlavor_IsTheFavoriteSentinel( a ) && ItemFlavor_IsTheFavoriteSentinel( b ) )
			return 1

		if ( ItemTypeHasDefault( itemType ) )
		{
			if ( ItemFlavor_IsTheDefault( a ) && !ItemFlavor_IsTheDefault( b ) )
				return -1
			else if ( !ItemFlavor_IsTheDefault( a ) && ItemFlavor_IsTheDefault( b ) )
				return 1
		}
		if ( ItemTypeHasRandom( itemType ) )
		{
			if ( ItemFlavor_IsTheRandom( a ) && !ItemFlavor_IsTheRandom( b ) )
				return -1
			else if ( !ItemFlavor_IsTheRandom( a ) && ItemFlavor_IsTheRandom( b ) )
				return 1
		}

		int aQuality = ItemFlavor_HasQuality( a ) ? ItemFlavor_GetQuality( a ) : -1
		int bQuality = ItemFlavor_HasQuality( b ) ? ItemFlavor_GetQuality( b ) : -1
		if ( aQuality > bQuality )
			return -1
		else if ( aQuality < bQuality )
			return 1

		string aTag = string(ItemFlavor_GetSourceIcon( a ))
		string bTag = string(ItemFlavor_GetSourceIcon( b ))
		if ( aTag > bTag )
			return -1
		else if ( aTag < bTag )
			return 1

		if ( itemType == eItemType.gladiator_card_intro_quip || itemType == eItemType.gladiator_card_kill_quip || itemType == eItemType.weapon_charm
				|| itemType == eItemType.character_skin || itemType == eItemType.music_pack || itemType == eItemType.loadscreen
				|| itemType == eItemType.gladiator_card_stance || itemType == eItemType.gladiator_card_frame || itemType == eItemType.weapon_skin)
			return SortStringAlphabetize( Localize( ItemFlavor_GetLongName( a ) ), Localize( ItemFlavor_GetLongName( b ) ) )

		return sortOrdinalFunc( a ) - sortOrdinalFunc( b )
	} )

	return items
}
#endif      

                                                                                                                                                                          
                                                                                                                                                                        
bool function IsLoadoutSlotActive( EHI playerEHI, LoadoutEntry entry, LoadoutEntry ornull entryToNotCheck = null )
{
	#if LOADOUTS_DBG
		                          
	#endif

	#if CLIENT || UI
		if ( playerEHI != LocalClientEHI() && entry.networkTo != eLoadoutNetworking.PLAYER_GLOBAL )
			return false
	#endif

	#if LOADOUTS_DBG
		                                                                      
		                                                                       
		                                    
			                                                                                                     
		    
			                                                                                    
	#endif

	                                                                                                             
	if ( entry.associatedCharacterOrNull != null )
	{
		ItemFlavor currentCharacter = LoadoutSlot_GetItemFlavor( playerEHI, Loadout_Character() )
		ItemFlavor ornull associatedCharacter = entry.associatedCharacterOrNull
		expect ItemFlavor ( associatedCharacter )
		if ( currentCharacter != associatedCharacter )
			return false
	}

	return true
}

                                                                                         
bool function IsLoadoutSlotCurrentlyNetworked( EHI playerEHI, LoadoutEntry entry, LoadoutEntry ornull entryToNotCheck = null )
{
	#if LOADOUTS_DBG
		                          
	#endif

	#if CLIENT || UI
		if ( playerEHI != LocalClientEHI() && entry.networkTo != eLoadoutNetworking.PLAYER_GLOBAL )
			return false
	#endif

	return IsLoadoutSlotActive( playerEHI, entry, entryToNotCheck )
}


bool function IsLoadoutSlotCurrentlyAccessible( EHI playerEHI, LoadoutEntry entry, LoadoutEntry ornull entryToNotCheck = null )
{
	#if LOADOUTS_DBG
		                          
	#endif

	#if SERVER
		           
	#elseif CLIENT || UI
		if ( playerEHI == LocalClientEHI() )
		{
			return true
		}

		if ( entry.networkTo != eLoadoutNetworking.PLAYER_GLOBAL )
		{
			return false
		}

		return IsLoadoutSlotActive( playerEHI, entry, entryToNotCheck )
	#endif
}


void function CallItemFlavorLoadoutSlotDidChangeCallbacks( EHI playerEHI, LoadoutEntry entry, ItemFlavor slotContents )
{
	#if LOADOUTS_DBG
		                          
	#endif

	foreach ( ItemFlavorLoadoutSlotDidChangeFuncType callback in entry.changeCallbacks_ItemFlavor )
		callback( playerEHI, slotContents )

	EHIScriptStruct ehiss = GetEHIScriptStruct( playerEHI )
	if ( entry.entryIndex in ehiss.itemFlavorLoadoutSlotChangedCallbacksMap )
	{
		foreach ( ItemFlavorLoadoutSlotDidChangeFuncType callback in ehiss.itemFlavorLoadoutSlotChangedCallbacksMap[entry.entryIndex] )
			callback( playerEHI, slotContents )
	}
}


void function CallIntegerLoadoutSlotDidChangeCallbacks( EHI playerEHI, LoadoutEntry entry, int value )
{
	#if LOADOUTS_DBG
		                          
	#endif

	foreach ( IntegerLoadoutSlotDidChangeFuncType callback in entry.changeCallbacks_Integer )
		callback( playerEHI, value )
}


ItemFlavor function GetDefaultItemFlavorForLoadoutSlot( EHI playerEHI, LoadoutEntry entry )
{
	#if LOADOUTS_DBG
		                          
	#endif

	return entry.defaultItemFlavor
}


#if SERVER || CLIENT || UI
bool function IsContentsIndexValidForLoadoutSlot( EHI playerEHI, LoadoutEntry entry, int slotContentsIndex, int validationBehavior = eValidation.DONT_ASSERT )
{
	#if LOADOUTS_DBG
		                          
	#endif

	if ( slotContentsIndex == SLOT_CONTENTS_SENTINEL_INVALID )
	{
		Assert( false || validationBehavior != eValidation.ASSERT, "Tried to assign invalid value to loadout slot." )
		return false
	}
	else if ( slotContentsIndex == SLOT_CONTENTS_SENTINEL_NOTREADY )
	{
		Assert( false || validationBehavior != eValidation.ASSERT, "Tried to assign invalid value to loadout slot." )
		return false
	}
	else
	{
		if ( !IsValidLoadoutSlotContentsIndex( entry, slotContentsIndex, validationBehavior ) )
		{
			                      
			return false
		}

		if ( entry.type == eLoadoutEntryType.ITEM_FLAVOR )
		{
			ItemFlavor itemFlavor = ConvertLoadoutSlotContentsIndexToItemFlavor( entry, slotContentsIndex )
			if ( !IsItemFlavorValidForLoadoutSlot( playerEHI, entry, itemFlavor ) )
			{
				Assert( false || validationBehavior != eValidation.ASSERT, "Tried to assign invalid item value to loadout slot." )
				return false
			}
			return true
		}
		else if ( entry.type == eLoadoutEntryType.INTEGER )
		{
			return true
		}
	}

	Assert( false || validationBehavior != eValidation.ASSERT, "Value is invalid for loadout slot." )
	return false
}
#endif


#if SERVER
                                                                                                                                                             
 
	                                              

	                                                       
	                         

	                                                                                           

	                                                                                
	                                                                                                                                           
	 
		                        
		                                                 
	 

	                                              
	 
		                                                                                                                  
		                                            
			                         
	 

	                          
	 
		                                            
		                                                                                           
		                                                                                                       
		                                                              
		                                                                                                                                                                        
	 

	                        

	                                                                                           
		        

	                                                                                                     
	                                                
	                                                                                  
	 
		                                                  
		 
			                                                                 
			 
				                                                                                                   
			 
		 
		                                                                                  
		                                                                 
	 
	                                                                                                                  
	                                                 
	 
		                                              
		                                                                                             
		                                                                                                       
		                                                                                           
	 
	                                   
 
#endif

#if SERVER
                                                                                       
 
	                                  

	                                                       
	                                               

	                       
	                          

	                                                                         
	 
		                 
		                    
	 

	                                                                                                                                          
	                                                 
	                                                                                         
	 
		                                                                                                                           
		                
			                                                    
		      
	 
 
#endif


#if SERVER
                                                                                                                                           
 
	                
		                          
	      

	                     

	                                    

	                                                                                                               

	                                                                       

	                                                       

	                                                                                 
	 
		                                                                                                
			                                                                                                                                            

		                  
	 
	                                                       
	 
		                                                                                               

		                                                                                                                                                                                                 
		                                                                                                            
		                          
		 
			                                                                                               
			 
				                   
					                                                                                                                                           

				                  
			 
		 
		    
		 
			                                                                      
			 
				                   
					                                                                                                                                           

				                  
			 
		 
	 

	                  
	 
		                                 
		                                   
			                                                                                                    

		                                                  
		 
			                     
			                           
			 
				                            
				                                                                
				 
					                             
						                                                                      
					                                 
						                                                                                                           
					                                                                                  
					 
						        
					 
					    
					 
						                                                                                         
						                                                        
						                        
					 
				 
				                              
			 
       
			                         
			 
				                                                                                                        
			 
      
			    
			 
				                                   
					                                                      
				    
					                                                                   
			 

			                                                                        
			                                                                                    
			               
		 
		                                                   
		 
			                        
			                           
			 
				                       
				                                                                  
					                                
				                                          
			 
       
			                         
			 
				                                                 
				                                                           
			 
      
			    
			 
				                                                   
			 

			                                        
			                                                                               
			               
		 
	 

	                                          
	 
		                                                     
		                                                                                                            
		                                                                                                            
		                                          
		 
			                                                                                     
			               
		 
	 

	               
 
#endif


#if SERVER || CLIENT || UI
array<string> ornull function GetLoadoutSlotForceResetTo( LoadoutEntry entry )
{
	#if LOADOUTS_DBG
		                          
	#endif

	if ( fileLevel.allowLoadoutSlotOverridesByPlaylist == false )
		return null

	                                                                                                                                   
	string playlistVarVal = GetCurrentPlaylistVarString( format( "loadout_slot_%s_force_reset_to", entry.id ), "" )

	if ( playlistVarVal == "" )
		playlistVarVal = GetCurrentPlaylistVarString( format( "loadout_slot_%s_force_reset_to", LOADOUT_CATEGORIES_TO_NAMES_MAP[entry.category] ), "" )                                       

	array<string> refs = split( playlistVarVal, WHITESPACE_CHARACTERS )
	if ( refs.len() == 0 )
		return null

	printf( "Warning: loadout slot '%s' is being force reset to one of '%s'.", entry.id, playlistVarVal )
	return refs
}
#endif


bool function IsLoadoutSlotLocked( EHI playerEHI, LoadoutEntry entry )
{
	#if LOADOUTS_DBG
		                          
	#endif

	if ( entry.isSlotLocked == null )
		return false

	#if DEV
		if ( GetCurrentPlaylistVarBool( "dev_loadout_changeable_at_any_time", false ) )
			return false
	#endif

                       
	if ( GetCurrentPlaylistVarBool( "winter_express_loadout_changeable_at_anytime", false ) )
		return false
       

                         
		if ( GetCurrentPlaylistVarBool( "control_loadout_changeable_at_anytime", false ) )
			return false
       

                        
		if ( GetCurrentPlaylistVarBool( "freedm_loadout_changeable_at_anytime", false ) )
			return false
       

	return entry.isSlotLocked( playerEHI )
}


#if SERVER
                                                                                           
 
	                               

	                                                             
	 
		                                                                                                                                                    
		      
	 
	                                                             

	                                      
	                                         
		      

	                                                                         
 

                                                                                                                
 
	                               

	                                                             
	 
		                                                                                                                                                    
		      
	 
	                                                             

	                                              
	 
		                                                                                                 
		      
	 

	                                                                                                     
	 
		                             
		      
	 

	                                                                                               
	                                                                          
	 
		                                                                                    
		                                                                                                                                                                   
		      
	 

	                                      
	                                         
		      

	                                                                                   

	      
 

                                                                                                 
 
	                               

	                                                               
	 
		                                                                                                                                                   
		      
	 
	                                                             

	                                              
	 
		                                                                                                
		      
	 

	                                                                                                     
	 
		                             
		      
	 

	                                                                      
	 
		                                                                              
		      
	 

	                                                                                               
	                                                                          
	 
		                                                                                    
		                                                                                                                                                                  
		      
	 

	                                                                        
 
#endif

#if DEV
void function DEV_LoadoutsDebug( LoadoutEntry entry )
{
		string func1 = expect string( expect table( getstackinfos( 3 ) ).func )                                                                     
		string func0 = expect string( expect table( getstackinfos( 2 ) ).func )
		printt("LoadoutsDebug: " + func1 + " called " + func0 + " for LoadoutEntry "+ entry.DEV_name)
}
#endif

#if SERVER && DEV
                                                                                       
 
	                  
	                                    
	                                            
	  
	                                                                   

	                                    
	                                    
	                                                                                 
	 
		                                                                                                                                                                                                                
		      
	 

	                                                                                                           
	                                            
	 
		                               

		                        
		                                   
		                                                                      
		 
			                     
			                                  
				               
			                                                                                       
			 
				                                                
					                                                         
				    
					                                                          
			 
			               
				                                       
		 
		                                 
		 
			                                                                                      
			        
		 

		                                         

		                                   

		                                                  

		                                                 
		 
			                     
			                     
			                                        
			 
				                                                                   
			 
			                                            
			 
				                                                          
				                  
				                      
			 
			                                                                            
			 
				                                                   

				                                                                   
				                                   
				 
					                                                
						        

					                                     
					     
				 

				                                                                        
				                                                                                                                   
			 
			                                                                            
			 
				                                                                           
			 
			    
			 
				                                                                                                               
				        
			 

			                                                        
				                                                  
			    
				                                                                                    

			                                                                                                          
			 
				                                                                                                                                                    
				        
			 

			                                                

			                                                                       

			                                                                        

			                                                                                               
		 

		                                                                                    
	 
 
#endif

#if DEV
void function DEV_DumpLoadoutEntries()
{
	string fmtStr = "%s,%s,%s,%s,%s"

	printt( format( fmtStr,
		"DEV_name",
		"id",
		"networkVarName",
		"category",
		"class"
	) )
	foreach ( LoadoutEntry entry in fileLevel.loadoutSlotEntries )
	{
		printt( format( fmtStr,
			entry.DEV_name,
			entry.id,
			entry.networkVarName,
			LOADOUT_CATEGORIES_TO_NAMES_MAP[entry.category],
			DEV_GetClassName( entry )
		) )
	}
}

string function DEV_GetClassName( LoadoutEntry entry )
{
	if ( entry.loadoutEntryClass == eLoadoutEntryClass.ACCOUNT )
		return "ACCOUNT"
	if ( entry.loadoutEntryClass == eLoadoutEntryClass.WEAPON )
		return "WEAPON"
	if ( entry.loadoutEntryClass == eLoadoutEntryClass.CHARACTER )
		return "CHARACTER"

	return "UNKNOWN"
}
#endif

