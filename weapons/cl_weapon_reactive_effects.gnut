global function MenuWeaponModel_ApplyReactiveSkinBodyGroup
global function MenuWeaponModel_StartReactiveEffects
global function MenuWeaponModel_ClearReactiveEffects

const bool MENU_WEAPON_REACTIVE_EFFECTS = false

struct
{
		table<entity, array<int> > activeMenuWeaponReactiveEffects
} file

void function MenuWeaponModel_ApplyReactiveSkinBodyGroup( ItemFlavor weaponSkinFlavor, ItemFlavor weaponFlavor, entity weaponModel )
{
	var skinBlock           = ItemFlavor_GetSettingsBlock( weaponSkinFlavor )
	var reactsToKillsLevels = GetSettingsBlockArray( skinBlock, "featureReactsToKillsLevels" )
	int numLevels           = GetSettingsArraySize( reactsToKillsLevels )
	int highestIdx          = numLevels - 1

	                                  
	WeaponReactiveKillsData bodyGroupData
	bool foundBodyGroup = false

	for ( int idx = highestIdx; idx >= 0; idx-- )
	{
		if ( !foundBodyGroup )
		{
			bodyGroupData = WeaponSkin_GetReactToKillsDataForLevel( weaponSkinFlavor, idx )

			if ( bodyGroupData.bodygroupSubmodelIdxMap.len() > 0 )
				foundBodyGroup = true
		}

		if ( foundBodyGroup )
			break
	}

	                    
	if ( foundBodyGroup )
	{
		foreach ( string bodygroup, int submodelIdx in bodyGroupData.bodygroupSubmodelIdxMap )
		{
			int bodygroupIdx = weaponModel.FindBodygroup( bodygroup )
			if ( bodygroupIdx < 0 )
				break

			weaponModel.SetBodygroupModelByIndex( bodygroupIdx, submodelIdx )
		}
	}
	else
	{
		ShowDefaultBodygroupsOnFakeWeapon( weaponModel, WeaponItemFlavor_GetClassname( weaponFlavor ) )
	}
}

void function MenuWeaponModel_StartReactiveEffects( entity weaponModel, ItemFlavor weaponSkin )
{
	#if !MENU_WEAPON_REACTIVE_EFFECTS
		return
	#endif

	int reactiveKillLevel = WeaponSkin_GetReactToKillsLevelCount( weaponSkin ) - 1             
	WeaponReactiveKillsData rtked = WeaponSkin_GetReactToKillsDataForLevel( weaponSkin, reactiveKillLevel )

	foreach ( int persistentFXIdx, string attachmentName in rtked.persistentFXAttachmentList )
	{
		                                                                                                                                
		                                                                    
		asset fx = rtked.persistentFX3PList[persistentFXIdx]              

		if ( fx != "" )
		{
			int fxHandle = StartParticleEffectOnEntity( weaponModel, GetParticleSystemIndex( fx ), FX_PATTACH_POINT_FOLLOW, weaponModel.LookupAttachment( attachmentName ) )
			if ( weaponModel in file.activeMenuWeaponReactiveEffects )
				file.activeMenuWeaponReactiveEffects[weaponModel].append( fxHandle )
			else
				file.activeMenuWeaponReactiveEffects[weaponModel] <- [ fxHandle ]
		}
	}
}

void function MenuWeaponModel_ClearReactiveEffects( entity weaponModel )
{
	#if !MENU_WEAPON_REACTIVE_EFFECTS
		return
	#endif

	if ( weaponModel in file.activeMenuWeaponReactiveEffects )
	{
		foreach ( fxHandle in file.activeMenuWeaponReactiveEffects[weaponModel] )
		{
			if ( EffectDoesExist( fxHandle ) )
				EffectStop( fxHandle, false, true )
		}

		delete file.activeMenuWeaponReactiveEffects[weaponModel]
	}
}